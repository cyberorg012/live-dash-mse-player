"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

// --------------------------------------------------
// manifest and children
// --------------------------------------------------
var DEFAULT_MIN_BUFFER_TIME = 30 * 1000;

var Manifest = (function (_Model) {
    function Manifest(xml, url) {
        _classCallCheck(this, Manifest);

        this.url = url;
        _get(Object.getPrototypeOf(Manifest.prototype), "constructor", this).call(this, xml);
    }

    _inherits(Manifest, _Model);

    _createClass(Manifest, {
        setup: {
            value: function setup() {
                this.attrs({
                    suggestedPresentationDelay: duration,
                    mediaPresentationDuration: duration,
                    timeShiftBufferDepth: duration,
                    minimumUpdatePeriod: duration,
                    minBufferTime: duration,
                    availabilityStartTime: date,
                    profiles: str,
                    type: str
                });

                // defined like this so a manifest is guaranteed either dynamic or not
                this.dynamic = this.type == "dynamic";
                this["static"] = !this.dynamic;

                // these durations are required when calculating segment URLs
                if (this.suggestedPresentationDelay == undefined) this.suggestedPresentationDelay = 0;
                if (this.availabilityStartTime == undefined) this.availabilityStartTime = 0;
                if (this.minBufferTime == undefined) this.minBufferTime = DEFAULT_MIN_BUFFER_TIME;

                this.init(BaseURL);
                this.initAll(Period);
            }
        },
        base: {

            // urls generated by segment templates will generally be relative urls.
            // to absolutify them, mpds can provide a BaseURL entry, or if that isn't
            // present, the URL of the mpd itself will be used.

            value: function base() {
                if (!this._base) {
                    if (this.baseURL) this._base = this.baseURL.absoluteTo(this.url);else this._base = URI(this.url).filename("").toString();
                }

                return this._base;
            }
        }
    });

    return Manifest;
})(Model);

var BaseURL = (function (_Model2) {
    function BaseURL() {
        _classCallCheck(this, BaseURL);

        if (_Model2 != null) {
            _Model2.apply(this, arguments);
        }
    }

    _inherits(BaseURL, _Model2);

    _createClass(BaseURL, {
        setup: {
            value: function setup() {
                this.url = this.xml.textContent;
            }
        },
        absoluteTo: {
            value: function absoluteTo(manifestURL) {
                var manifest = URI(manifestURL);
                var base = URI(this.url);
                return base.absoluteTo(manifest).toString();
            }
        }
    });

    return BaseURL;
})(Model);

var Period = (function (_Model3) {
    function Period() {
        _classCallCheck(this, Period);

        if (_Model3 != null) {
            _Model3.apply(this, arguments);
        }
    }

    _inherits(Period, _Model3);

    _createClass(Period, {
        setup: {
            value: function setup() {
                this.attrs({
                    id: str,
                    start: duration,
                    duration: duration
                });

                this.init(SegmentList);
                this.init(SegmentTemplate);
                this.initAll(AdaptationSet);
            }
        }
    });

    return Period;
})(Model);

// --------------------------------------------------
// adaptation sets
// --------------------------------------------------
var commonAttributes = {
    startWithSAP: integer,
    maximumSAPPeriod: dbl,
    codingDependency: bool,

    audioSamplingRate: str,
    maxPlayoutRate: dbl,
    frameRate: str,
    scanType: str,
    width: integer,
    height: integer,
    sar: str,

    segmentProfiles: str,
    profiles: str,
    mimeType: str,
    codecs: str
};

var AdaptationSet = (function (_Model4) {
    function AdaptationSet() {
        _classCallCheck(this, AdaptationSet);

        if (_Model4 != null) {
            _Model4.apply(this, arguments);
        }
    }

    _inherits(AdaptationSet, _Model4);

    _createClass(AdaptationSet, {
        setup: {
            value: function setup() {
                this.attrs(commonAttributes, {
                    subsegmentStartsWithSAP: integer,
                    segmentAlignment: bool,
                    subsegmentAlignment: bool,

                    maxFrameRate: integer,
                    maxWidth: integer,
                    maxHeight: integer,
                    contentType: str,
                    par: str,
                    lang: str,

                    group: integer,
                    id: integer
                });

                this.index = AdaptationSet.nextIndex();

                this.initAll(ContentComponent);
                this.init(SegmentList);
                this.init(SegmentTemplate);
                this.initAll(Representation);
            }
        }
    }, {
        nextIndex: {
            value: function nextIndex() {
                if (this._nextIndex == undefined) this._nextIndex = 0;
                this._nextIndex += 1;
                return this._nextIndex;
            }
        }
    });

    return AdaptationSet;
})(Model);

var ContentComponent = (function (_Model5) {
    function ContentComponent() {
        _classCallCheck(this, ContentComponent);

        if (_Model5 != null) {
            _Model5.apply(this, arguments);
        }
    }

    _inherits(ContentComponent, _Model5);

    _createClass(ContentComponent, {
        setup: {
            value: function setup() {
                this.attrs({
                    contentType: str,
                    lang: str,
                    par: str,
                    id: str
                });
            }
        }
    });

    return ContentComponent;
})(Model);

var Representation = (function (_Model6) {
    function Representation() {
        _classCallCheck(this, Representation);

        if (_Model6 != null) {
            _Model6.apply(this, arguments);
        }
    }

    _inherits(Representation, _Model6);

    _createClass(Representation, {
        setup: {
            value: function setup() {
                this.attrs(commonAttributes, {
                    id: str,
                    bandwidth: integer,
                    qualityRanking: integer,
                    dependencyId: str,
                    mediaStreamStructureId: str
                });

                // TODO: SegmentBase
                this.initAll(SubRepresentation);
                this.init(BaseURL);
                this.init(SegmentList);
                this.init(SegmentTemplate);
                this.inherit(AdaptationSet, Object.keys(commonAttributes));

                // inherit a template from the parent adaptation set or period if none
                // was defined in the representation.
                this.inherit(AdaptationSet, ["segmentTemplate"]);
                this.inherit(Period, ["segmentTemplate"]);

                // copy the template if it was inherited. this resets the parent of the
                // template to the representation allowing template strings to include
                // representation ids and bandwidths etc.
                if (this.segmentTemplate != undefined && this.segmentTemplate.parent != this) this.segmentTemplate = new SegmentTemplate(this.segmentTemplate, this);

                // repeat the same inheritance dance for segment lists
                this.inherit(AdaptationSet, ["segmentList"]);
                this.inherit(Period, ["segmentList"]);

                // and perform a copy again to reset parent. this allows BaseURLs in
                // an adaptation set to be used on lists inherited from the period.
                if (this.segmentList != undefined && this.segmentList.parent != this) this.segmentList = new SegmentList(this.segmentList, this);

                // representations must have some segments
                if (this.segmentTemplate == undefined && this.segmentList == undefined) throw "Representation must currently have a SegmentTemplate or SegmentList, or one must appear in ancestry";
            }
        },
        mseType: {
            get: function () {
                return "" + this.mimeType + "; codecs=\"" + this.codecs + "\"";
            }
        },
        mimeContentType: {
            get: function () {
                return this.mimeType.split("/")[0];
            }
        }
    });

    return Representation;
})(Model);

var SubRepresentation = (function (_Model7) {
    function SubRepresentation() {
        _classCallCheck(this, SubRepresentation);

        if (_Model7 != null) {
            _Model7.apply(this, arguments);
        }
    }

    _inherits(SubRepresentation, _Model7);

    _createClass(SubRepresentation, {
        setup: {
            value: function setup() {
                this.attrs(commonAttributes, {
                    level: integer,
                    bandwidth: integer,
                    dependencyLevel: str, // TODO: parse into list of SubRepr
                    contentComponent: str
                });
            }
        }
    });

    return SubRepresentation;
})(Model);

// --------------------------------------------------
// template segments
// --------------------------------------------------
var SegmentTemplate = (function (_Model8) {
    function SegmentTemplate() {
        _classCallCheck(this, SegmentTemplate);

        if (_Model8 != null) {
            _Model8.apply(this, arguments);
        }
    }

    _inherits(SegmentTemplate, _Model8);

    _createClass(SegmentTemplate, {
        setup: {
            value: function setup() {
                this.attrs({
                    bitstreamSwitching: str,
                    initialization: str,
                    index: str,
                    media: str,
                    startNumber: integer,
                    timescale: integer,
                    duration: integer,
                    presentationTimeOffset: integer
                });

                this.init(SegmentTimeline);

                // inherit attributes from SegmentTemplates in Periods and AdaptationSets
                // NOTE: this means the call order to init is important - Period must init
                // SegmentTemplate before AdaptationSet and so on.
                var attrNames = Object.keys(this.attributeDefinitions);
                this.inheritFrom(AdaptationSet, "segmentTemplate", attrNames);
                this.inheritFrom(Period, "segmentTemplate", attrNames);

                if (this.timescale == undefined) this.timescale = 1;

                if (this.startNumber == undefined) this.startNumber = 1;

                if (this.presentationTimeOffset == undefined) this.presentationTimeOffset = 0;
            }
        },
        postSetup: {
            value: function postSetup() {
                // initialise template strings in base SegmentTemplates - instances in
                // Period and AdaptationSet are used only as defaults for base instances
                if (this.parent instanceof Representation) {
                    // save index and media strings before processing
                    this.index_str = this.index;
                    this.media_str = this.media;

                    // parse templates
                    var bitstreamSwitching = new TemplateString("bitstreamSwitching", this);
                    var initialization = new TemplateString("initialization", this);
                    this.index = new TemplateString("index", this);
                    this.media = new TemplateString("media", this);

                    // if any of templates are invalid, and this SegmentTemplate instance
                    // is a child of a Representation, the parent Representation is invalid
                    if (bitstreamSwitching.invalid || initialization.invalid || this.index.invalid || this.media.invalid) {

                        this.invalid = true;
                        if (this.parent instanceof Representation) this.parent.invalid = true;
                    }

                    // neither initialization nor bitstreamSwitching can include Time or
                    // Number identifiers, so it's safe to use their pre-processed state
                    this.bitstreamSwitching = bitstreamSwitching.processed;
                    this.initialization = initialization.processed;
                }
            }
        },
        aligned: {
            value: function aligned(other) {
                return this.startNumber == other.startNumber && this.timescale == other.timescale && this.duration == other.duration;
            }
        },
        clone: {
            value: function clone(other) {
                other.bitstreamSwitching = this.bitstreamSwitching;
                other.initialization = this.initialization;
                other.index = this.index;
                other.media = this.media;
            }
        }
    });

    return SegmentTemplate;
})(Model);

var SegmentTimeline = (function (_Model9) {
    function SegmentTimeline() {
        _classCallCheck(this, SegmentTimeline);

        if (_Model9 != null) {
            _Model9.apply(this, arguments);
        }
    }

    _inherits(SegmentTimeline, _Model9);

    _createClass(SegmentTimeline, {
        setup: {
            value: function setup() {
                this.initAll(S);
            }
        }
    });

    return SegmentTimeline;
})(Model);

var S = (function (_Model10) {
    function S() {
        _classCallCheck(this, S);

        if (_Model10 != null) {
            _Model10.apply(this, arguments);
        }
    }

    _inherits(S, _Model10);

    _createClass(S, {
        setup: {
            value: function setup() {
                this.attrs({
                    t: integer, // time
                    d: integer, // duration
                    r: integer // num repeats
                });

                if (this.r == undefined) this.r = 0;
            }
        }
    });

    return S;
})(Model);

// --------------------------------------------------
// list segments
// --------------------------------------------------
var SegmentList = (function (_Model11) {
    function SegmentList() {
        _classCallCheck(this, SegmentList);

        if (_Model11 != null) {
            _Model11.apply(this, arguments);
        }
    }

    _inherits(SegmentList, _Model11);

    _createClass(SegmentList, {
        setup: {
            value: function setup() {
                this.attrs({
                    timescale: integer,
                    duration: integer
                });

                this.init(Initialization);
                this.initAll(SegmentURL);

                // inherit attributes from ancestors
                var attrNames = Object.keys(this.attributeDefinitions);
                this.inheritFrom(AdaptationSet, "segmentList", attrNames);
                this.inheritFrom(Period, "segmentList", attrNames);

                // inherit Initialization row from ancestor segment lists. start lookup
                // assuming we're a child of a Representation, next ancestor with a
                // SegmentList is an AdaptationSet. After that, Period.
                if (this.initialization == undefined) {
                    var adaptationSet = this.ancestor(AdaptationSet);
                    if (adaptationSet) this.initialization = adaptationSet["try"]("segmentList.initialization");

                    var period = this.ancestor(Period);
                    if (period && !this.initialization) this.initialization = period["try"]("segmentList.initialization");
                }
            }
        }
    });

    return SegmentList;
})(Model);

var SegmentURL = (function (_Model12) {
    function SegmentURL() {
        _classCallCheck(this, SegmentURL);

        if (_Model12 != null) {
            _Model12.apply(this, arguments);
        }
    }

    _inherits(SegmentURL, _Model12);

    _createClass(SegmentURL, {
        setup: {
            value: function setup() {
                this.attrs({
                    mediaRange: str,
                    indexRange: str,
                    media: str,
                    index: str
                });

                // media: inherit ancestor BaseURL when not preset
                if (this.media == undefined) {
                    var obj = this.parent;
                    while (obj && !obj.baseURL) obj = obj.parent;

                    if (obj) {
                        var manifest = this.ancestor(Manifest);
                        this.media = obj.baseURL.absoluteTo(manifest.url);
                    }
                }

                // index: inherit media, or ancestor BaseURL when not present
                if (this.index == undefined) this.index = this.media;
            }
        }
    });

    return SegmentURL;
})(Model);

var Initialization = (function (_Model13) {
    function Initialization() {
        _classCallCheck(this, Initialization);

        if (_Model13 != null) {
            _Model13.apply(this, arguments);
        }
    }

    _inherits(Initialization, _Model13);

    _createClass(Initialization, {
        setup: {
            value: function setup() {
                this.attrs({
                    sourceURL: str,
                    range: integer
                });
            }
        }
    });

    return Initialization;
})(Model);